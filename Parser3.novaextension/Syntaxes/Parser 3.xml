<?xml version="1.0" encoding="UTF-8"?>
<syntax name="parser3">
    <meta>
        <name>Parser 3</name>
        <type>script</type>
        <preferred-file-extension>html</preferred-file-extension>
    </meta>
    
    <detectors>
        <extension priority="1.0">html,p,pt</extension>
        <extension priority="0.9">h</extension>
    </detectors>

	<identifiers>
		<prefixes>
			<string>$</string>
			<string>^</string>
			<string>@</string>
		</prefixes>
	</identifiers>

	<indentation>
		<increase>
			<expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
		</increase>
		<decrease>
			<expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
		</decrease>
	</indentation>

    <comments>
		<single>
			<expression>#</expression>
		</single>
		<multiline>
			<starts-with>
				<expression>^rem{</expression>
			</starts-with>
			<ends-with>
				<expression>}</expression>
			</ends-with>
		</multiline>
    </comments>

	<brackets>
		<pair open="{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
	</brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
		<pair open="&quot;" close="&quot;" />
		<pair open="`" close="`" />
    </surrounding-pairs>

	<scopes>
		<include syntax="self" collection="comments" />
		<include syntax="self" collection="definitions" />
		<include syntax="self" collection="keywords" />
		<include syntax="self" collection="values" />
		<include syntax="self" collection="identifiers" />
		<include syntax="self" collection="blocks" />
		<include syntax="self" collection="syntax" />
		<include syntax="self" collection="properties" />
		<include syntax="self" collection="variables" />
	</scopes>

    <collections>

		<!-- Comments -->
		<collection name="comments">
			<scope name="parser3.comment.single" spell-check="true">
				<expression>^\#(.*)$</expression>
				<capture number="1" name="parser3.comment.text" />
			</scope>
			<scope name="parser3.comment.block" spell-check="true">
				<symbol type="comment">
					<context behavior="subtree" />
				</symbol>
				<starts-with>
					<expression>\^rem\{</expression>
				</starts-with>
				<ends-with>
					<expression>\}</expression>
				</ends-with>
			</scope>
		</collection>


	<!-- Definitions -->
		<collection name="definitions">

			<scope name="parser3.definition.method">
				<symbol type="method">
					<context behavior="subtree" foldable="false" />
				</symbol>
				<starts-with>
					<expression>^(@)([a-zA-Z_][a-zA-Z0-9_]*)</expression>
					<capture number="1" name="parser3.identifier.at" />
					<capture number="2" name="parser3.identifier.method.name" />
				</starts-with>
				<ends-with>
					<expression>\s*$</expression>
				</ends-with>
				<subscopes>
					<cut-off>
						<expression>(?=\b(?:@))</expression>
					</cut-off>
					<include syntax="self" collection="comments" />

					<scope name="parser3.arguments">
						<starts-with>
							<expression>(?&lt;=\w)\[</expression>
							<capture number="0" name="parser3.bracket" />
						</starts-with>
						<ends-with>
							<expression>\]</expression>
							<capture number="0" name="parser3.bracket" />
						</ends-with>
						<subscopes>
							<cut-off>
								<expression>(?=\b(?:@))</expression>
							</cut-off>
							<scope name="parser3.separator">
								<expression>;</expression>
							</scope>
							<scope name="parser3.identifier.argument.name">
								<symbol type="argument" />
								<expression>\b[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*\b</expression>
							</scope>
							
							<include syntax="self" collection="values" />
							<include syntax="self" collection="identifiers" />
							<include syntax="self" collection="syntax" />
						</subscopes>
					</scope>
					
				</subscopes>
			</scope>

			<scope name="parser3.definition.function.core">
				<symbol type="method" />
				<expression>^(@)([a-zA-Z_][a-zA-Z0-9_]*\s?)$</expression>
				<capture number="1" name="parser3.identifiers.at" />
				<capture number="2" name="parser3.identifier.function.name" />
			</scope>
			
		</collection>
		
		<!-- Arguments -->
		<collection name="arguments">
			<scope name="parser3.arguments">
				<include syntax="self" collection="comments" />
				<starts-with>
					<expression>\[</expression>
					<capture number="0" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>\]</expression>
					<capture number="0" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="comments" />
					<scope name="parser3.separator">
						<expression>;</expression>
					</scope>
					<scope name="parser3.identifier.argument.name">
						<symbol type="argument" />
						<expression>\b[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*\b</expression>
					</scope>
				</subscopes>
			</scope>
		</collection>
		
		<!-- Keywords -->
		<collection name="keywords">
			
			<scope name="parser3.keyword">
				<strings>
					<string>def</string>
					<string>eq</string>
					<string>ne</string>
					<string>is</string>
					<string>in</string>
					<string>lt</string>
					<string>qt</string>
					<string>le</string>
					<string>ge</string>
					<string>-d</string>
					<string>-f</string>
				</strings>
			</scope>
			
			<!-- [foo] -->			
			<scope name="parser3.keyword.property">
				<strings prefix="(\[)" suffix="(?=\])">
					<string>as-is</string>
					<string>file-spec</string>
					<string>uri</string>
					<string>http-header</string>
					<string>mail-header</string>
					<string>sql</string>
					<string>js</string>
					<string>json</string>
					<string>parser-code</string>
					<string>regex</string>
					<string>xml</string>
					<string>html</string>
					<string>optimized-as-is</string>
					<string>optimized-xml</string>
					<string>optimized-html</string>
					<!-- date -->
					<string>datetime</string>
					<string>date</string>
					<string>time</string>
					<string>year</string>
					<string>month</string>
					<string>day</string>
					<string>TZ</string>
					<string>rus</string>
					<string>eng</string>
				</strings>
			</scope>
			
			<!-- [foo] -->			
			<scope name="parser3.keyword.property.attributes">
				<strings prefix="(?&lt;=\[|;)" suffix="(?=;|\])">
					<!-- file -->
					<string>text</string>
					<string>binary</string>
					<string>UTF-8</string>
					<string>first</string>
					<string>last</string>
					<string>key</string>
					<string>value</string>
					<string>hash</string>
					<string>desc</string>
					<string>asc</string>
				</strings>
			</scope>
			
			<!-- [foo] -->			
			<scope name="parser3.keyword.error.types">
				<strings>
					<string>parser.compile</string>
					<string>parser.runtime</string>
					<string>parser.interrupted</string>
					<string>number.zerodivision </string>
					<string>number.format</string>
					<string>file.missing</string>
					<string>file.access</string>
					<string>file.read</string>
					<string>file.execute</string>
					<string>date.range</string>
					<string>pcre.execute</string>
					<string>image.format</string>
					<string>sql.connect</string>
					<string>sql.execute</string>
					<string>xml</string>
					<string>smtp.connect</string>
					<string>smtp.execute</string>
					<string>email.format</string>
					<string>email.send</string>
					<string>http.host</string>
					<string>http.connect</string>
					<string>http.response</string>
					<string>http.status</string>
					<string>http.timeout</string>
					<string>curl.host</string>
					<string>curl.connect</string>
					<string>curl.status</string>
					<string>curl.ssl</string>
					<string>curl.timeout</string>
					<string>curl.fail</string>
				</strings>
			</scope>

			<!-- ^foo({[ -->
			<scope name="parser3.keyword.operator">
				<strings prefix="(?&lt;=\^)" suffix="(?=\(|\{|\[)">
					<string>break</string>
					<string>cache</string>
					<string>connect</string>
					<string>continue</string>
					<string>eval</string>
					<string>if</string>
					<string>for</string>
					<string>foreach</string>
					<string>process</string>
					<string>return</string>
					<string>sleep</string>
					<string>switch</string>
					<string>throw</string>
					<string>while</string>
					<string>use</string>
				</strings>
			</scope>
			
			<!-- @foo -->
			<scope name="parser3.keyword.core.method">
				<!-- <strings prefix="^(?&lt;=\@)"> -->
				<strings prefix="^\@">
					<string>auto</string>
					<string>BASE</string>
					<string>CLASS</string>
					<string>create</string>
					<string>main</string>
					<string>postprocess</string>
					<string>OPTIONS</string>
					<string>static</string>
					<string>unhandled_exception</string>
					<string>USE</string>
				</strings>
			</scope>

			<!-- ^foo -->			
			<scope name="parser3.keyword.core.variable.method">
				<strings prefix="(?&lt;=\^)" suffix="(?=\.)">
					<string>MAIN</string>
					<string>LIMITS</string>
					<string>MAIL</string>
					<string>SQL</string>
					<string>MIME-TYPES</string>
				</strings>
			</scope>

			<!-- ^foo: -->
			<scope name="parser3.keyword.class">
				<!-- <strings prefix="(?&lt;=\^)" suffix="(?=[:\.])"> -->
				<strings prefix="(?&lt;=\^)" suffix="(?=:)">
					<string>cookie</string>
					<string>curl</string>
					<string>date</string>
					<string>double</string>
					<string>int</string>
					<string>env</string>
					<string>file</string>
					<string>form</string>
					<string>hash</string>
					<string>hashfile</string>
					<string>image</string>
					<string>inet</string>
					<string>json</string>
					<string>mail</string>
					<string>math</string>
					<string>memcached</string>
					<string>memory</string>
					<string>reflection</string>
					<string>regex</string>
					<string>request</string>
					<string>response</string>
					<string>status</string>
					<string>string</string>
					<string>table</string>
					<string>void</string>
					<string>xdoc</string>
				</strings>
			</scope>
			
			<!-- $foo: -->
			<scope name="parser3.keyword.class.static">
				<strings prefix="(?&lt;=\$)" suffix="(?=:)">
					<string>console</string>
					<string>cookie</string>
					<string>env</string>
					<string>form</string>
					<string>math</string>
					<string>request</string>
					<string>response</string>
					<string>status</string>
				</strings>
			</scope>

			<!-- :foo({[ -->
			<scope name="parser3.keyword.class.method">
				<strings prefix="(?&lt;=:)" suffix="(?=\(|\{|\[)">
					<string>base64</string>
					<string>calendar</string>
					<!-- <string>create</string> -->
					<string>cos</string>
					<string>idna</string>
					<string>js-unescape</string>
					<string>load</string>
					<string>last-day</string>
					<string>roll</string>
					<string>sin</string>
					<string>sql</string>
					<string>unescape</string>
					<!-- file -->
					<string>base64</string>
					<string>basename</string>
					<string>copy</string>
					<string>crc32</string>
					<string>delete</string>
					<string>dirname</string>
					<string>find</string>
					<string>fullpath</string>
					<string>justext</string>
					<string>justname</string>
					<string>list</string>
					<string>lock</string>
					<string>md5</string>
					<string>move</string>
					<!-- inet -->
					<string>aton</string>
					<string>ip2name</string>
					<string>name2ip</string>
					<string>ntoa</string>
					<!-- inet -->
					<string>string</string>
					<string>parse</string>
					<!-- mail -->
					<string>send</string>
					<!-- math -->
					<string>abs</string>
					<string>sign</string>
					<string>convert</string>
					<string>crc32</string>
					<string>crypt</string>
					<string>degrees</string>
					<string>radians</string>
					<string>digest</string>
					<string>exp</string>
					<string>log</string>
					<string>log10</string>
					<string>md5</string>
					<string>pow</string>
					<string>random</string>
					<string>round</string>
					<string>floor</string>
					<string>ceiling</string>
					<string>sha1</string>
					<string>sin</string>
					<string>asin</string>
					<string>cos</string>
					<string>acos</string>
					<string>acos</string>
					<string>tan</string>
					<string>atan</string>
					<string>sqrt</string>
					<string>sqrt</string>
					<string>trunc</string>
					<string>frac</string>
					<string>uid64</string>
					<string>uuid</string>
					<!-- memory -->					
					<string>compact</string>
					<!-- reflection -->
					<string>base</string>
					<string>base_name</string>
					<string>class</string>
					<string>class_by_name</string>
					<string>class_name</string>
					<string>classes</string>
					<string>copy</string>
					<string>create</string>
					<string>def</string>
					<string>delete</string>
					<string>dynamical</string>
					<string>field</string>
					<string>fields</string>
					<string>fields_reference</string>
					<string>filename</string>
					<string>is</string>
					<string>method</string>
					<string>method_info</string>
					<string>methods</string>
					<string>mixin</string>
					<string>stack</string>
					<string>tainting</string>
					<string>uid</string>
					<!-- request -->
					<string>charset</string>
					<string>document-root</string>
					<!-- response -->
					<string>body</string>
					<string>charset</string>
					<string>download</string>
					<string>clear</string>
				</strings>
			</scope>

			<!-- ::foo({[ -->
			<scope name="parser3.keyword.class.method">
				<strings prefix="(?&lt;=(::))" suffix="(?=\(|\{|\[)">
					<string>create</string>
					<string>now</string>
					<string>today</string>
					<string>unix-timestamp</string>
					<string>sql</string>
					<!-- file -->
					<string>base64</string>
					<string>cgi</string>
					<string>exec</string>
					<string>stat</string>
					<!-- hashfile -->
					<string>open</string>
					<!-- image -->
					<string>measure</string>
					<!-- xdoc -->
					<string>load</string>
				</strings>
			</scope>

			<!-- :foo -->
			<scope name="parser3.keyword.class.property">
				<strings prefix="(?&lt;=:)">
					<string>fields</string>
					<string>files</string>
					<string>imap</string>
					<string>line</string>
					<string>qtail</string>
					<string>tables</string>
					<string>headers</string>
					
					<!-- env -->
					<string>PARSER_VERSION</string>
					<string>REMOTE_ADDR</string>
					<string>HTTP_USER_AGENT</string>
					
					<!-- math -->
					<string>PI</string>
					<string>E</string>
					
					<!-- request -->
					<string>argv</string>
					<string>body</string>
					<string>post-charset</string>
					<string>body-charset</string>
					<string>body-charset</string>
					<string>post-body</string>
					<string>body-file</string>
					<string>method</string>
					<string>query</string>
					<string>uri</string>
					
					<!-- response -->
					<string>status</string>
					<string>headers</string>
					
					<!-- status -->
					<string>memory</string>
					<string>pid</string>
					<string>rusage</string>
					<string>tid</string>

				</strings>
			</scope>

			<!-- .foo({[ -->
			<scope name="parser3.keyword.class.instance.method">
				<strings prefix="(?&lt;=\.)" suffix="(?=\(|\{|\[)">
					<string>save</string>
					<string>sort</string>
					<string>delete</string>
					<string>foreach</string>
					<string>length</string>
					<string>replace</string>
					
					<!-- date -->
					<string>gmt-string</string>
					<string>iso-string</string>
					<string>last-day</string>
					<string>roll</string>
					<string>sql-string</string>
					<string>unix-timestamp</string>
					<!-- double -->
					<!-- int -->					
					<string>format</string>
					<string>inc</string>
					<string>dec</string>
					<string>mul</string>
					<string>div</string>
					<string>mod</string>
					<string>int</string>
					<string>double</string>
					<string>bool</string>
					
					<!-- file -->
					<string>base64</string>
					<string>crc32</string>
					<string>md5</string>
					<string>save</string>
					<string>sql-string</string>
					
					<!-- hash -->
					<string>_at</string>
					<string>at</string>
					<string>_count</string>
					<string>count</string>
					<string>_keys</string>
					<string>keys</string>
					<string>contains</string>
					<string>add</string>
					<string>intersection</string>
					<string>intersects</string>
					<string>sub</string>
					<string>union</string>
					
					<!-- hashfile -->
					<string>cleanup</string>
					<string>hash</string>
					<string>release</string>

					<!-- image -->
					<string>gif</string>
					<string>html</string>
					<string>line-style</string>
					<string>line-width</string>
					<string>arc</string>
					<string>bar</string>
					<string>circle</string>
					<string>copy</string>
					<string>fill</string>
					<string>font</string>
					<string>line</string>
					<string>pixel</string>
					<string>polybar</string>
					<string>polygon</string>
					<string>polyline</string>
					<string>rectangle</string>
					<string>sector</string>
					<string>text</string>
					
					<!-- string -->
					<string>base64</string>
					<string>bool</string>
					<string>int</string>
					<string>idna</string>
					<string>double</string>
					<string>js-escape</string>
					<string>format</string>
					<string>left</string>
					<string>lower</string>
					<string>match</string>
					<string>mid</string>
					<string>pos</string>
					<string>right</string>
					<string>split</string>
					<string>trim</string>
					<string>upper</string>
					
					<!-- table -->
					<string>append</string>
					<string>columns</string>
					<string>count</string>
					<string>csv-string</string>
					<string>flip</string>
					<string>hash</string>
					<string>insert</string>
					<string>join</string>
					<string>menu</string>
					<string>line</string>
					<string>foreach</string>
					<string>offset</string>
					<string>select</string>
					
					<!-- memcached -->
					<string>add</string>
					<string>clear</string>
					<string>delete</string>
					<string>mget</string>
					<string>release</string>

				</strings>
			</scope>
			
			<!-- .foo -->
			<scope name="parser3.keyword.class.instance.value">
				<strings prefix="(?&lt;=\.)">
					<!-- date -->
					<string>month</string>
					<string>year</string>
					<string>day</string>
					<string>hour</string>
					<string>minute</string>
					<string>second</string>
					<string>weekday</string>
					<string>week</string>
					<string>weekyear</string>
					<string>yearday</string>
					<string>daylightsaving</string>
					<string>TZ</string>
					<!-- file -->
					<string>name</string>
					<string>size</string>
					<string>size</string>
					<string>text</string>
					<string>cdate</string>
					<string>mdate</string>
					<string>adate</string>
					<string>stderr</string>
					<string>status</string>
					<string>mode</string>
					<string>content-type</string>
					<string>SERVER</string>
				</strings>
			</scope>
			
		</collection>
		
		<!-- Variables -->
		<collection name="variables">
			<scope name="parser3.identifier.variable.core">
				<!-- <strings word-boundary="false" suffix="\b"> -->
				<strings word-boundary="true" suffix="\b">
					<string>LIMITS</string>
					<string>MAIN</string>
					<string>MAIL</string>
					<string>MIME-TYPES</string>  
					<string>SQL</string>
					<string>return</string>
				</strings>
			</scope>

			<scope name="parser3.identifier.variable">
				<symbol type="variable"  scope="local" />
				<expression>(\$)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)</expression>
				<capture number="1" name="parser3.identifier.symbol" />
				<capture number="2" name="parser3.identifier.name" />
			</scope>
		</collection>

		<!-- Values -->
		<collection name="values">
			<include syntax="self" collection="strings" />
			<scope name="parser3.value.number">
				<expression>\b(\-|\+)?(?:\d+(?:\.\d*)?|(?:\.\d+))(l|L|j|J)?\b</expression>
			</scope>
			<scope name="parser3.value.boolean">
				<strings>
					<string>true</string>
					<string>false</string>
				</strings>
			</scope>
		</collection>

		<!-- Strings -->
		<collection name="strings">
			<scope name="parser3.string.double-quoted">
				<expression>&quot;((?:[^&quot;\\]|\\.)*)(?:&quot;|$)</expression>
				<capture number="1" name="parser3.string.double-quoted.text" />
			</scope>
			<scope name="parser3.string.single-quoted">
				<expression>&apos;((?:[^&apos;\\]|\\.)*)(?:&apos;|$)</expression>
				<capture number="1" name="parser3.string.single-quoted.text" />
			</scope>
			<scope name="parser3.string.single-quoted">
				<expression>q([^\\q])((?:[^\1\\]|\\.)*)(?:\1|$)</expression>
				<capture number="1" name="parser3.string.single-quoted.text" />
			</scope>
			<!-- <scope name="parser3.string.regex">
				<expression>/([^/\\]|\\.)*(?:/|$)</expression>
				<capture number="1" name="parser3.string.regex.text" />
			</scope> -->
		</collection>

		<!-- Identifiers -->
		<collection name="identifiers">
			<include syntax="self" collection="variables" />

			<scope name="parser3.identifier.method">
				<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\\\x7f-\xff]*)</expression>
			</scope> 
			
			<scope name="parser3.identifier">
				<expression>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</expression>
			</scope>
		</collection>

		<!-- Blocks -->
		<collection name="blocks">
			<scope name="parser3.block.default">
				<symbol type="block">
					<context behavior="subtree" />
				</symbol>
				<starts-with>
					<expression>\{</expression>
					<capture number="0" name="parser3.block.bracket" />
				</starts-with>
				<ends-with>
					<expression>\}</expression>
					<capture number="0" name="parser3.block.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" />
				</subscopes>
			</scope>
		
			<scope name="parser3.block.sql">
				<starts-with>
					<expression>(sql)(\{)</expression>
					<capture number="1" name="parser3.block.sql.keyword" />
					<capture number="2" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>(?=\})</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
			</scope>
			
			<scope name="parser3.block.taint.options">
				<starts-with>
					<expression>\^(taint|untaint|apply-taint)(\[)</expression>
					<capture number="1" name="parser3.block.taint.keyword" />
					<capture number="2" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>(?=\])</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<expression>(.*)</expression>
					<capture number="1" name="parser3.keyword.property" />
				</subscopes>
			</scope>

			<scope name="parser3.block.try">
				<starts-with>
					<expression>(\^try)(\{)</expression>
					<capture number="1" name="parser3.block.try.keyword" />
					<capture number="2" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>(?=\})</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
			</scope>
			
		</collection>

    	<!-- Syntax -->
		<collection name="syntax">
			<scope name="parser3.bracket">
				<expression>[\(\[\{\)\]\}]</expression>
			</scope>
			<scope name="parser3.operator">
				<expression>(\+|\-|\*|\*\*|/|%|\=|\=\=|!\=|\+\=|\-\=|\*\=|/\=|%\=|\*\*=|\&lt;|\&gt;|\&lt;\=|\&gt;=|!|&amp;&amp;|\|\|)</expression>
			</scope>
		</collection>
	</collections>

</syntax>

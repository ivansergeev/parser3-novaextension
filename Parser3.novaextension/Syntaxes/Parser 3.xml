<?xml version="1.0" encoding="UTF-8"?>
<syntax name="parser3">
	<meta>
		<name>Parser 3</name>
		<type>script</type>
		<parent>html</parent>
		<preferred-file-extension>html</preferred-file-extension>
	</meta>
	
	<detectors>
		<extension priority="1.0">html,p,pt,p3</extension>
		<extension priority="0.9">h</extension>
	</detectors>

	<identifiers>
		<prefixes>
			<string>$</string>
			<string>^</string>
			<string>@</string>
		</prefixes>
	</identifiers>

	<indentation>
		<increase>
			<expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
		</increase>
		<decrease>
			<expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
		</decrease>
	</indentation>

	<comments>
		
		<!-- doesn't work with shortcut :-( -->
		<!-- 
		<single>
				<expression>#</expression>
		</single>
		-->
		
		<multiline>
			<starts-with>
				<expression>^rem{</expression>
			</starts-with>
			<ends-with>
				<expression>}</expression>
			</ends-with>
		</multiline>
	</comments>

	<brackets>
		<pair open="{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
	</brackets>

	<surrounding-pairs>
		<pair open="{" close="}" />
		<pair open="[" close="]" />
		<pair open="(" close=")" />
		<pair open="&apos;" close="&apos;" />
		<pair open="&quot;" close="&quot;" />
		<pair open="`" close="`" />
	</surrounding-pairs>

	<scopes>
		<include syntax="html" />
		
		<include syntax="self" collection="comments" />
		<include syntax="self" collection="blocks" />
		<include syntax="self" collection="sql" />
		<include syntax="self" collection="definitions" />
		<include syntax="self" collection="directives" />		
		<include syntax="self" collection="keywords" />
		<include syntax="self" collection="property" />
		<include syntax="self" collection="values" />
		<include syntax="self" collection="identifiers" />
		<include syntax="self" collection="syntax" />
		<include syntax="self" collection="properties" />
		<include syntax="self" collection="variables" />
	</scopes>

	<collections>

		<!-- Comments -->
		<collection name="comments">
			
			<scope name="parser3.comment.single" spell-check="true">
				<expression>^\#(.*)$</expression>
			</scope>
			
			<scope name="parser3.comment.block" spell-check="true">
				<symbol type="comment">
					<context behavior="subtree" />
				</symbol>
				<starts-with>
					<expression>\^rem\{</expression>
				</starts-with>
				<ends-with>
					<expression>\}</expression>
				</ends-with>
			</scope>
		</collection>

		<!--  Directives -->
		<collection name="directives">

			<!-- LOGIC -->

			<scope name="parser3.directives.block.logic">
				<starts-with>
					<expression>(?&lt;=\()</expression>
					<capture number="1" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>(?=\))</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					
					<!-- comments to parts of expressions -->				
					<scope name="parser3.comment.single" spell-check="true">
						<symbol type="comment" />
						<expression>(\#(.*))$</expression>
						<capture number="1" name="parser3.comment.text" />
					</scope>

					<!-- boolean -->
					<scope name="parser3.value.boolean">
						<strings>
							<string>true</string>
							<string>false</string>
						</strings>
					</scope>
					
					<!-- logic operator -->
					<scope name="parser3.keyword.logic">
						<expression>(?&lt;=[\s\(])!?(eq|def|ne|is|in|lt|qt|le|ge|-[df])(?=\s)</expression>
					</scope>
					
					<!-- class types -->
					<scope name="parser3.keyword.class.type">
						<strings>
							<string>cookie</string>
							<string>curl</string>
							<string>date</string>
							<string>double</string>
							<string>int</string>
							<string>env</string>
							<string>file</string>
							<string>form</string>
							<string>hash</string>
							<string>hashfile</string>
							<string>image</string>
							<string>inet</string>
							<string>json</string>
							<string>mail</string>
							<string>math</string>
							<string>memcached</string>
							<string>memory</string>
							<string>reflection</string>
							<string>regex</string>
							<string>request</string>
							<string>response</string>
							<string>status</string>
							<string>string</string>
							<string>table</string>
							<string>void</string>
							<string>xdoc</string>
						</strings>
					</scope>
					
					<!-- exception types -->
					<scope name="parser3.keyword.exception.types">
						<strings>
							<string>parser.compile</string>
							<string>parser.runtime</string>
							<string>parser.interrupted</string>
							<string>number.zerodivision </string>
							<string>number.format</string>
							<string>file.missing</string>
							<string>file.access</string>
							<string>file.read</string>
							<string>file.execute</string>
							<string>date.range</string>
							<string>pcre.execute</string>
							<string>image.format</string>
							<string>sql.connect</string>
							<string>sql.execute</string>
							<string>xml</string>
							<string>smtp.connect</string>
							<string>smtp.execute</string>
							<string>email.format</string>
							<string>email.send</string>
							<string>http.host</string>
							<string>http.connect</string>
							<string>http.response</string>
							<string>http.status</string>
							<string>http.timeout</string>
							<string>curl.host</string>
							<string>curl.connect</string>
							<string>curl.status</string>
							<string>curl.ssl</string>
							<string>curl.timeout</string>
							<string>curl.fail</string>
						</strings>
					</scope>
					
					<include syntax="self" collection="keywords" />
					<include syntax="self" collection="variables" />
					<include syntax="self" collection="values" />
					<include syntax="self" collection="strings" />
					
					<include syntax="self" collection="identifiers" />
					
					<!-- <scope name="parser3.identifier.method.call">
						<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\-\\\x7f-\xff]*)</expression>
					</scope>
					
					<scope name="parser3.identifier.field">
						<expression>(?&lt;=[\:\.])[a-zA-Z_][a-zA-Z0-9_-]*</expression>
					</scope> -->

				</subscopes>
			</scope>
			
			<!-- SQL -->
			
			<scope name="parser3.directives.block.sql">
				<symbol type="block">
					<context behavior="subtree" foldable="true" />
				</symbol>
				<starts-with>
					<expression>(?&lt;=sql\{)</expression>
					<capture number="1" name="parser3.keyword.class.method" />
				</starts-with>
				<ends-with>
					<expression>(?=\})</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="comments" />
					<include syntax="self" collection="blocks" />
					<include syntax="self" collection="sql" />
					<include syntax="self" collection="directives" />
					<include syntax="self" collection="keywords" />
					<include syntax="self" collection="variables" />

					<scope name="parser3.identifier.method.call">
						<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\\\x7f-\xff]*)</expression>
					</scope>
				</subscopes>
			</scope>
			
			<!-- TAINT -->

			<scope name="parser3.directives.block.apply-taint">
				<starts-with>
					<expression>(?&lt;=\^apply\-taint\[)</expression>
					<capture number="1" name="parser3.keyword.operator" />
					<!-- <capture number="2" name="parser3.bracket" /> -->
				</starts-with>
				<ends-with>
					<expression>(?=\]\[)</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="taint" />
				</subscopes>
			</scope>
			
			<scope name="parser3.directives.block.taint">
				<starts-with>
					<expression>(?&lt;=\^taint\[)</expression>
					<capture number="1" name="parser3.keyword.operator" />
				</starts-with>
				<ends-with>
					<expression>(?=\]\[)</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="taint" />
				</subscopes>
			</scope>	
			
			<scope name="parser3.directives.block.untaint">
				<starts-with>
					<expression>(?&lt;=\^untaint\[)</expression>
					<capture number="1" name="parser3.keyword.operator" />
				</starts-with>
				<ends-with>
					<expression>(?=\]\{)</expression>
					<capture number="1" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" collection="taint" />
				</subscopes>
			</scope>
			
		</collection>
		
	<!-- Definitions -->
		<collection name="definitions">
		
			<scope name="parser3.definition.class">
				<starts-with>
					<expression>^(@)(CLASS)$</expression>
					<capture number="1" name="parser3.identifier.at" />
					<capture number="2" name="parser3.keyword.core.method" />
				</starts-with>
				<ends-with>
					<expression>^(?=@)</expression>
				</ends-with>
				<subscopes>
					<scope name="parser3.definition.class.name">
						<symbol type="class" />
						<expression>^([a-zA-Z_][a-zA-Z0-9_]*)</expression>
					</scope>
				</subscopes>
			</scope>
			
			<scope name="parser3.definition.method">
				<symbol type="method">
					<context behavior="subtree" foldable="false" />
				</symbol>
				<starts-with>
					<expression>^(@)(?!CLASS\b)\b([a-zA-Z_][a-zA-Z0-9_]*)\b</expression>
					<capture number="1" name="parser3.identifier.at" />
					<capture number="2" name="parser3.identifier.method.name" />
				</starts-with>
				<ends-with>
					<expression>$</expression>
				</ends-with>
				<subscopes>
					<cut-off>
						<expression>(?=\b(?:@))</expression>
					</cut-off>
					<include syntax="self" collection="comments" />

					<scope name="parser3.arguments">
						<starts-with>
							<expression>(?&lt;=\w)\[</expression>
							<capture number="0" name="parser3.bracket" />
						</starts-with>
						<ends-with>
							<expression>\]</expression>
							<capture number="0" name="parser3.bracket" />
						</ends-with>
						<subscopes>
							<cut-off>
								<expression>(?=\b(?:@))</expression>
							</cut-off>
							<scope name="parser3.separator">
								<expression>;</expression>
							</scope>
							<scope name="parser3.identifier.argument.name">
								<symbol type="argument" />
								<expression>\b[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*\b</expression>
							</scope>
							
							<include syntax="self" collection="values" />
							<include syntax="self" collection="identifiers" />
							<include syntax="self" collection="syntax" />
						</subscopes>
					</scope>
					
				</subscopes>
			</scope>

			<scope name="parser3.definition.method.core">
				<symbol type="method" />
				<expression>^(@)(?!CLASS\b)([a-zA-Z_][a-zA-Z0-9_]*\s?)$</expression>
				<capture number="1" name="parser3.identifiers.at" />
				<capture number="2" name="parser3.identifier.function.name" />
			</scope>

		</collection>
		
		<!-- LOGIC -->

		<!-- <collection name="logic-operator">
			<scope name="parser3.keyword.logic">
				<expression>(?&lt;=[\s\(])(eq|def|ne|is|in|lt|qt|le|ge|-[df])(?=\s)</expression>
			</scope>
		</collection> -->

		<!-- TAINT -->
		<collection name="taint">
			<scope name="parser3.keyword.property">
				<strings prefix="(?&lt;=\[)" suffix="(?=\])">
					<string>as-is</string>
					<string>file-spec</string>
					<string>uri</string>
					<string>http-header</string>
					<string>mail-header</string>
					<string>sql</string>
					<string>js</string>
					<string>json</string>
					<string>parser-code</string>
					<string>regex</string>
					<string>xml</string>
					<string>html</string>
					<string>optimized-as-is</string>
					<string>optimized-xml</string>
					<string>optimized-html</string>
				</strings>
			</scope>
		</collection>
		
		<!-- Keywords -->
		<collection name="keywords">

			<!-- [foo] -->
			<scope name="parser3.keyword.property">
				<strings prefix="(?&lt;=\[)" suffix="(?=\])">
					<!-- date -->
					<string>datetime</string>
					<string>date</string>
					<string>time</string>
					<string>year</string>
					<string>month</string>
					<string>day</string>
					<string>TZ</string>
					<string>rus</string>
					<string>eng</string>
				</strings>
			</scope>
			
			<!-- [foo] -->			
			<scope name="parser3.keyword.property.attributes">
				<strings prefix="(?&lt;=\[|;)" suffix="(?=;|\])">
					<!-- file -->
					<string>text</string>
					<string>binary</string>
					<string>UTF-8</string>
					<string>first</string>
					<string>last</string>
					<string>key</string>
					<string>value</string>
					<string>hash</string>
					<string>desc</string>
					<string>asc</string>
				</strings>
			</scope>
			
			<!-- ^foo({[ -->
			<scope name="parser3.keyword.operator">
				<strings prefix="(?&lt;=\^)" suffix="(?=\(|\{|\[)">
					<string>apply-taint</string>
					<string>break</string>
					<string>cache</string>
					<string>connect</string>
					<string>continue</string>
					<string>eval</string>
					<string>if</string>
					<string>for</string>
					<string>foreach</string>
					<string>process</string>
					<string>return</string>
					<string>sleep</string>
					<string>switch</string>
					<string>throw</string>
					<string>taint</string>
					<string>while</string>
					<string>use</string>
					<string>untaint</string>
				</strings>
			</scope>
			
			<!-- @foo -->
			<scope name="parser3.keyword.core.method">
				<strings prefix="^\@">
					<string>auto</string>
					<string>BASE</string>
					<string>CLASS</string>
					<string>create</string>
					<string>main</string>
					<string>postprocess</string>
					<string>OPTIONS</string>
					<string>static</string>
					<string>unhandled_exception</string>
					<string>USE</string>
				</strings>
			</scope>

			<!-- ^foo -->			
			<scope name="parser3.keyword.core.variable.method">
				<strings prefix="(?&lt;=\^)" suffix="(?=\.)" case-insensitive="false">
					<string>CLASS_PATH</string>
					<string>MAIN</string>
					<string>LIMITS</string>
					<string>MAIL</string>
					<string>SQL</string>
					<string>MIME-TYPES</string>
				</strings>
			</scope>

			<!-- ^foo: -->
			<scope name="parser3.keyword.class">
				<strings prefix="(?&lt;=\^)" suffix="(?=:)">
					<string>cookie</string>
					<string>curl</string>
					<string>date</string>
					<string>double</string>
					<string>int</string>
					<string>env</string>
					<string>file</string>
					<string>form</string>
					<string>hash</string>
					<string>hashfile</string>
					<string>image</string>
					<string>inet</string>
					<string>json</string>
					<string>mail</string>
					<string>math</string>
					<string>memcached</string>
					<string>memory</string>
					<string>reflection</string>
					<string>regex</string>
					<string>request</string>
					<string>response</string>
					<string>status</string>
					<string>string</string>
					<string>table</string>
					<string>void</string>
					<string>xdoc</string>
				</strings>
			</scope>
			
			<!-- $foo: -->
			<scope name="parser3.keyword.class.static">
				<strings prefix="(?&lt;=\$)" suffix="(?=:)" scope="private">
					<string>console</string>
					<string>cookie</string>
					<string>env</string>
					<string>form</string>
					<string>math</string>
					<string>request</string>
					<string>response</string>
					<string>status</string>
				</strings>
			</scope>

			<!-- :foo({[ -->
			<scope name="parser3.keyword.class.method">
				<strings prefix="(?&lt;=:)" suffix="(?=\(|\{|\[)">
					<string>base64</string>
					<string>calendar</string>
					<!-- <string>create</string> -->
					<string>cos</string>
					<string>idna</string>
					<string>js-unescape</string>
					<string>load</string>
					<string>last-day</string>
					<string>roll</string>
					<string>sin</string>
					<string>sql</string>
					<string>unescape</string>
					<!-- file -->
					<string>base64</string>
					<string>basename</string>
					<string>copy</string>
					<string>crc32</string>
					<string>delete</string>
					<string>dirname</string>
					<string>find</string>
					<string>fullpath</string>
					<string>justext</string>
					<string>justname</string>
					<string>list</string>
					<string>lock</string>
					<string>md5</string>
					<string>move</string>
					<!-- inet -->
					<string>aton</string>
					<string>ip2name</string>
					<string>name2ip</string>
					<string>ntoa</string>
					<!-- inet -->
					<string>string</string>
					<string>parse</string>
					<!-- mail -->
					<string>send</string>
					<!-- math -->
					<string>abs</string>
					<string>sign</string>
					<string>convert</string>
					<string>crc32</string>
					<string>crypt</string>
					<string>degrees</string>
					<string>radians</string>
					<string>digest</string>
					<string>exp</string>
					<string>log</string>
					<string>log10</string>
					<string>md5</string>
					<string>pow</string>
					<string>random</string>
					<string>round</string>
					<string>floor</string>
					<string>ceiling</string>
					<string>sha1</string>
					<string>sin</string>
					<string>asin</string>
					<string>cos</string>
					<string>acos</string>
					<string>acos</string>
					<string>tan</string>
					<string>atan</string>
					<string>sqrt</string>
					<string>sqrt</string>
					<string>trunc</string>
					<string>frac</string>
					<string>uid64</string>
					<string>uuid</string>
					<!-- memory -->
					<string>compact</string>
					<!-- reflection -->
					<string>base</string>
					<string>base_name</string>
					<string>class</string>
					<string>class_by_name</string>
					<string>class_name</string>
					<string>classes</string>
					<string>copy</string>
					<string>create</string>
					<string>def</string>
					<string>delete</string>
					<string>dynamical</string>
					<string>field</string>
					<string>fields</string>
					<string>fields_reference</string>
					<string>filename</string>
					<string>is</string>
					<string>method</string>
					<string>method_info</string>
					<string>methods</string>
					<string>mixin</string>
					<string>stack</string>
					<string>tainting</string>
					<string>uid</string>
					<!-- request -->
					<string>charset</string>
					<string>document-root</string>
					<!-- response -->
					<string>body</string>
					<string>charset</string>
					<string>download</string>
					<string>clear</string>
					<string>location</string>
					<string>refresh</string>
					
				</strings>
			</scope>

			<!-- ::foo({[ -->
			<scope name="parser3.keyword.class.method">
				<strings prefix="(?&lt;=(::))" suffix="(?=\(|\{|\[)">
					<string>create</string>
					<string>now</string>
					<string>today</string>
					<string>unix-timestamp</string>
					<string>sql</string>
					<!-- file -->
					<string>base64</string>
					<string>cgi</string>
					<string>exec</string>
					<string>stat</string>
					<!-- hashfile -->
					<string>open</string>
					<!-- image -->
					<string>measure</string>
					<!-- xdoc -->
					<string>load</string>
				</strings>
			</scope>

			<!-- :foo -->
			<scope name="parser3.keyword.class.property">
				<strings prefix="(?&lt;=:)">
					<string>fields</string>
					<string>files</string>
					<string>imap</string>
					<string>line</string>
					<string>qtail</string>
					<string>tables</string>
					<string>headers</string>
					
					<!-- env -->
					<string>PARSER_VERSION</string>
					<string>REMOTE_ADDR</string>
					<string>HTTP_USER_AGENT</string>

					<!-- math -->
					<string>PI</string>
					<string>E</string>

					<!-- request -->
					<string>argv</string>
					<string>body</string>
					<string>charset</string>
					<string>post-charset</string>
					<string>body-charset</string>
					<string>body-charset</string>
					<string>post-body</string>
					<string>body-file</string>
					<string>method</string>
					<string>query</string>
					<string>uri</string>

					<!-- response -->
					<string>status</string>
					<string>headers</string>
					

					<!-- status -->
					<string>memory</string>
					<string>pid</string>
					<string>rusage</string>
					<string>tid</string>

					<!-- xdoc -->
					<string>ELEMENT_NODE</string>
					<string>ATTRIBUTE_NODE</string>
					<string>TEXT_NODE</string>
					<string>CDATA_SECTION_NODE</string>
					<string>ENTITY_REFERENCE_NODE</string>
					<string>ENTITY_NODE</string>
					<string>PROCESSING_INSTRUCTION_NODE</string>
					<string>COMMENT_NODE</string>
					<string>DOCUMENT_NODE</string>
					<string>DOCUMENT_TYPE_NODE</string>
					<string>DOCUMENT_FRAGMENT_NODE</string>
					<string>NOTATION_NODE</string>

				</strings>
			</scope>

			<!-- .foo({[ -->
			<scope name="parser3.keyword.class.instance.method">
				<strings prefix="(?&lt;=[\w\]]\.)" suffix="(?=\(|\{|\[)">
					<string>save</string>
					<string>sort</string>
					<string>delete</string>
					<string>foreach</string>
					<string>length</string>
					<string>replace</string>
					
					<!-- exception -->
					<string>handled</string>
					
					<!-- date -->
					<string>gmt-string</string>
					<string>iso-string</string>
					<string>last-day</string>
					<string>roll</string>
					<string>sql-string</string>
					<string>unix-timestamp</string>
					<!-- double -->
					<!-- int -->					
					<string>format</string>
					<string>inc</string>
					<string>dec</string>
					<string>mul</string>
					<string>div</string>
					<string>mod</string>
					<string>int</string>
					<string>double</string>
					<string>bool</string>
					
					<!-- file -->
					<string>base64</string>
					<string>crc32</string>
					<string>md5</string>
					<string>save</string>
					<string>sql-string</string>
					
					<!-- hash -->
					<string>_at</string>
					<string>at</string>
					<string>_count</string>
					<string>count</string>
					<string>_keys</string>
					<string>keys</string>
					<string>contains</string>
					<string>add</string>
					<string>intersection</string>
					<string>intersects</string>
					<string>sub</string>
					<string>union</string>
					
					<!-- hashfile -->
					<string>cleanup</string>
					<string>hash</string>
					<string>release</string>

					<!-- image -->
					<string>gif</string>
					<string>html</string>
					<string>line-style</string>
					<string>line-width</string>
					<string>arc</string>
					<string>bar</string>
					<string>circle</string>
					<string>copy</string>
					<string>fill</string>
					<string>font</string>
					<string>line</string>
					<string>pixel</string>
					<string>polybar</string>
					<string>polygon</string>
					<string>polyline</string>
					<string>rectangle</string>
					<string>sector</string>
					<string>text</string>
					
					<!-- string -->
					<string>base64</string>
					<string>bool</string>
					<string>int</string>
					<string>idna</string>
					<string>double</string>
					<string>js-escape</string>
					<string>format</string>
					<string>left</string>
					<string>lower</string>
					<string>match</string>
					<string>mid</string>
					<string>pos</string>
					<string>right</string>
					<string>split</string>
					<string>trim</string>
					<string>upper</string>
					
					<!-- SQL -->
					<string>connect-string</string>
					
					<!-- table -->
					<string>append</string>
					<string>columns</string>
					<string>count</string>
					<string>csv-string</string>
					<string>flip</string>
					<string>hash</string>
					<string>insert</string>
					<string>join</string>
					<string>menu</string>
					<string>line</string>
					<string>foreach</string>
					<string>offset</string>
					<string>select</string>
					
					<!-- memcached -->
					<string>add</string>
					<string>clear</string>
					<string>delete</string>
					<string>mget</string>
					<string>release</string>

					<!-- xdoc -->
					<string>createElement</string>
					<string>createDocumentFragment</string>
					<string>createTextNode</string>
					<string>createComment</string>
					<string>createCDATASection</string>
					<string>createProcessingInstruction</string>
					<string>createAttribute</string>
					<string>createEntityReference</string>
					<string>getElementsByTagName</string>
					<string>importNode</string>
					<string>createElementNS</string>
					<string>createAttributeNS</string>
					<string>getElementsByTagNameNS</string>
					<string>getElementById</string>
					<string>file</string>
					<!-- <string>save</string> -->
					<string>string</string>
					<string>transform</string>
					
					<!-- xnode -->
					<string>insertBefore</string>
					<string>replaceChild</string>
					<string>removeChild</string>
					<string>appendChild</string>
					<string>hasChildNodes</string>
					<string>cloneNode</string>
					<string>getAttribute</string>
					<string>setAttribute</string>
					<string>removeAttribute</string>
					<string>getAttributeNode</string>
					<string>setAttributeNode</string>
					<string>removeAttributeNode</string>
					<string>getElementsByTagName</string>
					<string>normalize</string>
					<string>getAttributeNS</string>
					<string>setAttributeNS</string>
					<string>removeAttributeNS</string>
					<string>getAttributeNodeNS</string>
					<string>setAttributeNodeNS</string>
					<string>getElementsByTagNameNS</string>
					<string>hasAttribute</string>
					<string>hasAttributeNS</string>
					<string>hasAttributes</string>
					<string>select</string>
					<string>selectSingle</string>
					<string>selectString</string>
					<string>selectNumber</string>
					<string>selectBool</string>
				</strings>
			</scope>
			
			<!-- .foo -->
			<scope name="parser3.keyword.class.instance.property">
				<strings prefix="(?&lt;=\.)">
					<string>name</string>
					<string>fields</string>
					<!-- date -->
					<string>month</string>
					<string>year</string>
					<string>day</string>
					<string>hour</string>
					<string>minute</string>
					<string>second</string>
					<string>weekday</string>
					<string>week</string>
					<string>weekyear</string>
					<string>yearday</string>
					<string>daylightsaving</string>
					<string>TZ</string>
					<!-- exception -->
					<string>type</string>
					<string>source</string>
					<string>file</string>
					<string>lineno</string>
					<string>colno</string>
					<string>comment</string>
					<string>handled</string>
					<!-- file -->
					<string>size</string>
					<string>text</string>
					<string>cdate</string>
					<string>mdate</string>
					<string>adate</string>
					<string>stderr</string>
					<string>status</string>
					<string>mode</string>
					<string>content-type</string>
					<string>SERVER</string>
					<!-- hash -->
					<string>_default</string>
					<!-- image -->
					<string>src</string>
					<string>width</string>
					<string>height</string>
					<string>exif</string>
					<!-- status -->
					<string>utime</string>
					<string>stime</string>
					<string>maxrss</string>
					<string>tv_sec</string>
					<string>tv_usec</string>
					<string>used</string>
					<string>free</string>
					<string>ever_allocated_since_compact</string>
					<string>ever_allocated_since_start</string>
					<!-- SQL -->
					<string>connect-string</string>
					<!-- xdoc -->
					<string>doctype</string>
					<string>documentElement</string>
					<string>search-namespaces</string>
					<!-- xnode -->
					<string>nodeName</string>
					<string>nodeValue</string>
					<string>nodeType</string>
					<string>parentNode</string>
					<string>childNodes</string>
					<string>firstChild</string>
					<string>lastChild</string>
					<string>previousSibling</string>
					<string>nextSibling</string>
					<string>attributes</string>
					<string>prefix</string>
					<string>namespaceURI</string>
					<string>tagName</string>
					<string>name</string>
					<string>specified</string>
					<string>value</string>
					<string>target</string>
					<string>data</string>
					<string>entities</string>
					<string>notations</string>
					<string>publicId</string>
					<string>systemId</string>
				</strings>
			</scope>

		</collection>
		
		<!-- Property -->
		<collection name="property">

			<!-- $.foo[({})] -->			
			<scope name="parser3.core.options">
				<strings prefix="(?&lt;=\$\.)">
					<string>array</string>
					<string>any-status</string>
					<string>accept_encoding</string>
					<string>autoreferer</string>
					<string>bind</string>
					<string>body</string>
					<string>binary-protocol</string>
					<string>cainfo</string>
					<string>capath</string>
					<string>charset</string>
					<string>class-name</string>
					<string>colon</string>
					<string>content-type</string>
					<string>connect-timeout</string>
					<string>connecttimeout</string>
					<string>connecttimeout_ms</string>
					<string>cookie</string>
					<string>cookies</string>
					<string>cookielist</string>
					<string>cookiesession</string>
					<string>copypostfields</string>
					<string>crlfile</string>
					<string>customrequest</string>
					<string>date</string>
					<string>default</string>
					<string>depth</string>
					<string>double</string>
					<string>distinct</string>
					<string>domain</string>
					<string>encloser</string>
					<string>enctype</string>
					<string>encoding</string>
					<string>expires</string>
					<string>failonerror</string>
					<string>file</string>
					<string>form</string>
					<string>followlocation</string>
					<string>forbid_reuse</string>
					<string>fresh_connect</string>
					<string>from</string>
					<string>from-charset</string>
					<string>headers</string>
					<string>html</string>
					<string>httponly</string>
					<string>http_content_decoding</string>
					<string>http_transfer_decoding</string>
					<string>httpauth</string>
					<string>httpget</string>
					<string>httpheader</string>
					<string>httppost</string>
					<string>httpproxytunnel</string>
					<string>int</string>
					<string>indent</string>
					<string>ignore_content_length</string>
					<string>interface</string>
					<string>ipresolve</string>
					<string>issuercert</string>
					<string>keypasswd</string>
					<string>library</string>
					<string>limit</string>
					<string>lineno</string>
					<string>localport</string>
					<string>low_speed_limit</string>
					<string>low_speed_time</string>
					<string>main</string>
					<string>maxconnects</string>
					<string>maxfilesize</string>
					<string>maxredirs</string>
					<string>mode</string>
					<string>method</string>
					<string>ms</string>
					<string>name</string>
					<string>nobody</string>
					<string>type</string>
					<string>to</string>
					<string>to-charset</string>
					<string>tcp-keepalive</string>
					<string>object</string>
					<string>offset</string>
					<string>omit-post-charset</string>
					<string>omit-xml-declaration</string>
					<string>options</string>
					<string>path</string>
					<string>post</string>
					<string>port</string>
					<string>postfields</string>
					<string>postredir</string>
					<string>proxy</string>
					<string>proxyauth</string>
					<string>proxyport</string>
					<string>proxytype</string>
					<string>proxyuserpwd</string>
					<string>password</string>
					<string>print-debug</string>
					<string>range</string>
					<string>referer</string>
					<string>replace</string>
					<string>reverse</string>
					<string>response-charset</string>
					<string>skip-unknown</string>
					<string>server</string>
					<string>separator</string>
					<string>ssl_cipher_list</string>
					<string>ssl_sessionid_cache</string>
					<string>ssl_verifyhost</string>
					<string>ssl_verifypeer</string>
					<string>sslcert</string>
					<string>sslcerttype</string>
					<string>sslengine</string>
					<string>sslengine_default</string>
					<string>sslkey</string>
					<string>sslkeytype</string>
					<string>sslversion</string>
					<string>stderr</string>
					<string>subject</string>
					<string>taint</string>
					<string>table</string>
					<string>timeout</string>
					<string>timeout_ms</string>
					<string>text</string>
					<string>value</string>
					<string>void</string>
					<string>user</string>
					<string>unrestricted_auth</string>
					<string>url</string>
					<string>useragent</string>
					<string>username</string>
					<string>userpwd</string>
					<string>verbose</string>
					<string>z</string>
					<string>xdoc</string>
					<string>_default</string>
				</strings>
			</scope>
		</collection>
		
		<!-- Variables -->
		<collection name="variables">
			<scope name="parser3.identifier.variable.core">
				<strings word-boundary="true" scope="private" prefix="(?&lt;=\$)" suffix="\b">
					<string>CLASS_PATH</string>
					<string>LIMITS</string>
					<string>MAIN</string>
					<string>MAIL</string>
					<string>MIME-TYPES</string>
					<string>SQL</string>
					<string>result</string>
					<string>exception</string>
					<string>key</string>
					<string>value</string>
				</strings>
			</scope>

			<scope name="parser3.identifier.variable">
				<symbol type="variable" scope="private" />
				<!-- <expression>\$(?!(console|cookie|env|form|math|request|response|status|result|exception|key|value|CLASS_PATH|LIMITS|MAIN|MAIL|MIME-TYPES|SQL)\b)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)</expression> -->
				<expression>(\$)([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)</expression>
				<capture number="1" name="parser3.symbol" />
				<capture number="2" name="parser3.identifier.variable.name" />
			</scope>
			
			<!-- the variable from the parameter doesn't work :-( -->
			<!-- 
			<scope name="parser3.identifier.variable.parameter">
				<symbol type="variable" scope="private" />
				<expression>^@[a-zA-Z_][a-zA-Z0-9_]*\[([a-zA-Z_]\w*)*\]$</expression>
				<capture number="1" name="parser3.identifier.variable.name" />
			</scope>
			-->

		</collection>

		<!-- Values -->
		<collection name="values">
			<include syntax="self" collection="strings" />
			<scope name="parser3.value.number">
				<expression>\b(\-|\+)?(?:\d+(?:\.\d*)?|(?:\.\d+))(l|L|j|J)?\b</expression>
			</scope>
			<!-- <scope name="parser3.value.boolean">
				<strings>
					<string>true</string>
					<string>false</string>
				</strings>
			</scope> -->
		</collection>

		<!-- Strings -->
		<collection name="strings">
			<scope name="parser3.string.double-quoted">
				<expression>&quot;((?:[^&quot;\\]|\\.)*)(?:&quot;|$)</expression>
				<capture number="1" name="parser3.string.double-quoted.text" />
			</scope>
			<scope name="parser3.string.single-quoted">
				<expression>&apos;((?:[^&apos;\\]|\\.)*)(?:&apos;|$)</expression>
				<capture number="1" name="parser3.string.single-quoted.text" />
			</scope>
			<scope name="parser3.string.single-quoted">
				<expression>q([^\\q])((?:[^\1\\]|\\.)*)(?:\1|$)</expression>
				<capture number="1" name="parser3.string.single-quoted.text" />
			</scope>
			
			<!-- regex -->
			<!-- <scope name="parser3.string.regex">
				<starts-with>
					<expression>(?&lt;=\^regex::create\[)</expression>
				</starts-with>
				<ends-with>
					<expression>(?=\])</expression>
				</ends-with>
				<subscopes>
					
					<scope name="parser3.comment.single" spell-check="true">
						<symbol type="comment" />
						<expression>(?&lt;!\\)(\#(.*))$</expression>
						<capture number="1" name="parser3.comment.text" />
					</scope>

					<include syntax="self" collection="blocks" />
					<include syntax="self" collection="variables" />
					
					<scope name="parser3.identifier.method.call">
						<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\-\\\x7f-\xff]*)</expression>
					</scope>
					
				</subscopes>
			</scope> -->
			
			<!-- regex -->
			<!-- <scope name="parser3.string.regex">
				<starts-with>
					<expression>(?&lt;=\.match\[)</expression>
				</starts-with>
				<ends-with>
					<expression>(?=\])</expression>
				</ends-with>
				<subscopes>

					<scope name="parser3.comment.single" spell-check="true">
						<symbol type="comment" />
						<expression>(?&lt;!\\)(\#(.*))$</expression>
						<capture number="1" name="parser3.comment.text" />
					</scope>
					
					<scope name="parser3.bracket">
						<expression>[\(\{\[\]\}\)]</expression>
					</scope>
					<include syntax="self" collection="variables" />

					<scope name="parser3.identifier.method.call">
						<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\-\\\x7f-\xff]*)</expression>
					</scope> 
					
				</subscopes>
			</scope> -->
			
			
		</collection>

		<!-- Identifiers -->
		<collection name="identifiers">
			<include syntax="self" collection="variables" />

			<scope name="parser3.identifier.method.call">
				<expression>\^([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\-\\\x7f-\xff]*)</expression>
			</scope>
			
			<!-- <scope name="parser3.identifier">
				<expression>[a-zA-Z_-\x7f-\xff][a-zA-Z0-9_-\x7f-\xff]*</expression>
			</scope> -->
			<scope name="parser3.identifier.field">
				<expression>(?&lt;=[\:\.])[a-zA-Z_][a-zA-Z0-9_-]*</expression>
			</scope>
			
		</collection>

		<!-- Blocks -->
		<collection name="blocks">

			<scope name="parser3.block.code">
				<symbol type="block">
					<context behavior="subtree" foldable="true" />
				</symbol>
				<starts-with>
					<expression>\{</expression>
					<capture number="0" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>\}</expression>
					<capture number="0" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" />
				</subscopes>
			</scope>
		
			<scope name="parser3.block.hashstring">
				<symbol type="block">
					<context behavior="subtree" foldable="true" />
				</symbol>
				<starts-with>
					<expression>\[</expression>
					<capture number="0" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>\]</expression>
					<capture number="0" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" />
				</subscopes>
			</scope>
			
			<scope name="parser3.block.logic">
				<symbol type="block">
					<context behavior="subtree" foldable="true" />
				</symbol>
				<starts-with>
					<expression>\(</expression>
					<capture number="0" name="parser3.bracket" />
				</starts-with>
				<ends-with>
					<expression>\)</expression>
					<capture number="0" name="parser3.bracket" />
				</ends-with>
				<subscopes>
					<include syntax="self" />
				</subscopes>
			</scope>
			
		</collection>
		
		<!-- SQL -->
		<collection name="sql">
			
			<scope name="sql.keyword">
				<strings>
					<string>ABSOLUTE</string>
					<string>ACTION</string>
					<string>ADA</string>
					<string>ADD</string>
					<string>ALL</string>
					<string>ALLOCATE</string>
					<string>ALTER</string>
					<string>AND</string>
					<string>ANY</string>
					<string>ARE</string>
					<string>AS</string>
					<string>ASC</string>
					<string>ASSERTION</string>
					<string>AT</string>
					<string>AUTHORIZATION</string>
					<string>AVG</string>
					<string>BEGIN</string>
					<string>BETWEEN</string>
					<string>BIT</string>
					<string>BIT_LENGTH</string>
					<string>BOTH</string>
					<string>BTREE</string>
					<string>BY</string>
					<string>CASCADE</string>
					<string>CASCADED</string>
					<string>CASE</string>
					<string>CAST</string>
					<string>CATALOG</string>
					<string>CHAR</string>
					<string>CHARACTER</string>
					<string>CHARACTER_LENGTH</string>
					<string>CHAR_LENGTH</string>
					<string>CHARSET</string>
					<string>CHECK</string>
					<string>CLOSE</string>
					<string>COALESCE</string>
					<string>COLLATE</string>
					<string>COLLATION</string>
					<string>COLUMN</string>
					<string>COMMIT</string>
					<string>CONNECT</string>
					<string>CONNECTION</string>
					<string>CONSTRAINT</string>
					<string>CONSTRAINTS</string>
					<string>CONTINUE</string>
					<string>CONVERT</string>
					<string>CORRESPONDING</string>
					<string>COUNT</string>
					<string>CREATE</string>
					<string>CROSS</string>
					<string>CURRENT</string>
					<string>CURRENT_DATE</string>
					<string>CURRENT_TIME</string>
					<string>CURRENT_TIMESTAMP</string>
					<string>CURRENT_USER</string>
					<string>CURSOR</string>
					<string>DATE</string>
					<string>DAY</string>
					<string>DEALLOCATE</string>
					<string>DEC</string>
					<string>DECIMAL</string>
					<string>DECLARE</string>
					<string>DEFAULT</string>
					<string>DEFERRABLE</string>
					<string>DEFERRED</string>
					<string>DELETE</string>
					<string>DESC</string>
					<string>DESCRIBE</string>
					<string>DESCRIPTOR</string>
					<string>DIAGNOSTICS</string>
					<string>DISCONNECT</string>
					<string>DISTINCT</string>
					<string>DOMAIN</string>
					<string>DOUBLE</string>
					<string>DROP</string>
					<string>ELSE</string>
					<string>END</string>
					<string>END-EXEC</string>
					<string>ENGINE</string>
					<string>ESCAPE</string>
					<string>EXCEPT</string>
					<string>EXCEPTION</string>
					<string>EXEC</string>
					<string>EXECUTE</string>
					<string>EXISTS</string>
					<string>EXTERNAL</string>
					<string>EXTRACT</string>
					<string>FETCH</string>
					<string>FIRST</string>
					<string>FLOAT</string>
					<string>FOR</string>
					<string>FOREIGN</string>
					<string>FORTRAN</string>
					<string>FOUND</string>
					<string>FROM</string>
					<string>FULL</string>
					<string>GET</string>
					<string>GLOBAL</string>
					<string>GO</string>
					<string>GOTO</string>
					<string>GRANT</string>
					<string>GROUP</string>
					<string>HAVING</string>
					<string>HOUR</string>
					<string>IDENTITY</string>
					<string>IF</string>
					<string>IMMEDIATE</string>
					<string>IN</string>
					<string>INCLUDE</string>
					<string>INDEX</string>
					<string>INDICATOR</string>
					<string>INITIALLY</string>
					<string>INNER</string>
					<string>INPUT</string>
					<string>INSENSITIVE</string>
					<string>INSERT</string>
					<string>INT</string>
					<string>INTEGER</string>
					<string>INTERSECT</string>
					<string>INTERVAL</string>
					<string>INTO</string>
					<string>IS</string>
					<string>ISOLATION</string>
					<string>JOIN</string>
					<string>KEY</string>
					<string>LANGUAGE</string>
					<string>LAST</string>
					<string>LEADING</string>
					<string>LEFT</string>
					<string>LEVEL</string>
					<string>LIKE</string>
					<string>LOCAL</string>
					<string>LOCK</string>
					<string>LOWER</string>
					<string>MATCH</string>
					<string>MAX</string>
					<string>MIN</string>
					<string>MINUTE</string>
					<string>MODULE</string>
					<string>MONTH</string>
					<string>NAMES</string>
					<string>NATIONAL</string>
					<string>NATURAL</string>
					<string>NCHAR</string>
					<string>NEXT</string>
					<string>NO</string>
					<string>NONE</string>
					<string>NOT</string>
					<string>NOW</string>
					<string>NULLIF</string>
					<string>NUMERIC</string>
					<string>OCTET_LENGTH</string>
					<string>OF</string>
					<string>ON</string>
					<string>ONLY</string>
					<string>OPEN</string>
					<string>OPTION</string>
					<string>OR</string>
					<string>ORDER</string>
					<string>OUTER</string>
					<string>OUTPUT</string>
					<string>OVERLAPS</string>
					<string>PAD</string>
					<string>PARTIAL</string>
					<string>PASCAL</string>
					<string>POSITION</string>
					<string>PRECISION</string>
					<string>PREPARE</string>
					<string>PRESERVE</string>
					<string>PRIMARY</string>
					<string>PRIOR</string>
					<string>PRIVILEGES</string>
					<string>PROCEDURE</string>
					<string>PUBLIC</string>
					<string>READ</string>
					<string>REAL</string>
					<string>REFERENCES</string>
					<string>RELATIVE</string>
					<string>RESTRICT</string>
					<string>REVOKE</string>
					<string>RIGHT</string>
					<string>ROLLBACK</string>
					<string>ROWS</string>
					<string>SCHEMA</string>
					<string>SCROLL</string>
					<string>SECOND</string>
					<string>SECTION</string>
					<string>SELECT</string>
					<string>SESSION</string>
					<string>SESSION_USER</string>
					<string>SET</string>
					<string>SIZE</string>
					<string>SMALLINT</string>
					<string>SOME</string>
					<string>SPACE</string>
					<string>SQL</string>
					<string>SQLCA</string>
					<string>SQLCODE</string>
					<string>SQLERROR</string>
					<string>SQLSTATE</string>
					<string>SQLWARNING</string>
					<string>SUBSTRING</string>
					<string>SUM</string>
					<string>SYSTEM_USER</string>
					<string>TABLE</string>
					<string>TABLES</string>
					<string>TEMPORARY</string>
					<string>THEN</string>
					<string>TIME</string>
					<string>TIMESTAMP</string>
					<string>TIMEZONE_HOUR</string>
					<string>TIMEZONE_MINUTE</string>
					<string>TO</string>
					<string>TRAILING</string>
					<string>TRUNCATE</string>
					<string>TRANSACTION</string>
					<string>TRANSLATE</string>
					<string>TRANSLATION</string>
					<string>TRIM</string>
					<string>UNION</string>
					<string>UNIQUE</string>
					<string>UNKNOWN</string>
					<string>UNLOCK</string>
					<string>UPDATE</string>
					<string>UPPER</string>
					<string>USAGE</string>
					<string>USER</string>
					<string>USING</string>
					<string>VALUE</string>
					<string>VALUES</string>
					<string>VARCHAR</string>
					<string>VARYING</string>
					<string>VIEW</string>
					<string>WHEN</string>
					<string>WHENEVER</string>
					<string>WHERE</string>
					<string>WITH</string>
					<string>WORK</string>
					<string>WRITE</string>
					<string>YEAR</string>
					<string>ZONE</string>
				</strings>
			</scope>
			
			<scope name="sql.identifier.type.core">
				<strings>
					<string>bigint</string>
					<string>bigserial</string>
					<string>bit</string>
					<string>bit varying</string>
					<string>bool</string>
					<string>boolean</string>
					<string>box</string>
					<string>bytea</string>
					<string>char</string>
					<string>character</string>
					<string>character varying</string>
					<string>cidr</string>
					<string>circle</string>
					<string>date</string>
					<string>datetime</string>
					<string>double precision</string>
					<string>float</string>
					<string>float8</string>
					<string>hstore</string>
					<string>inet</string>
					<string>int</string>
					<string>int4</string>
					<string>int8</string>
					<string>integer</string>
					<string>interval</string>
					<string>json</string>
					<string>jsonb</string>
					<string>line</string>
					<string>lseg</string>
					<string>macaddr</string>
					<string>money</string>
					<string>numeric</string>
					<string>path</string>
					<string>pg_lsn</string>
					<string>point</string>
					<string>polygon</string>
					<string>real</string>
					<string>serial</string>
					<string>serial8</string>
					<string>smallint</string>
					<string>smallserial</string>
					<string>text</string>
					<string>time</string>
					<string>timestamp</string>
					<string>timestampz</string>
					<string>tinyint</string>
					<string>tsquery</string>
					<string>tsvector</string>
					<string>txid_snapshot</string>
					<string>uuid</string>
					<string>xml</string>
					<string>unsigned</string>
					<string>varchar</string>
				</strings>
			</scope>

			<scope name="sql.identifier.type.attribute">
				<strings>
					<string>auto_increment</string>
				</strings>
			</scope>

			<scope name="sql.value.number">
				<expression>\b[0-9]+(?:\.[0-9]+)?(?:(?:e|E)(?:\+|\-)?[0-9]+)?\b</expression>
			</scope>
			<scope name="sql.value.boolean">
				<strings case-insensitive="true">
					<string>TRUE</string>
					<string>FALSE</string>
				</strings>
			</scope>
			<scope name="sql.value.null">
				<strings case-insensitive="true">
					<string>NULL</string>
				</strings>
			</scope>
			
		</collection>

		<!-- Syntax -->
		<collection name="syntax">
			<!-- <scope name="parser3.bracket.block.start">
				<symbol type="block">
					<context behavior="start" />
				</symbol>
				<expression>\{</expression>
			</scope>
			<scope name="parser3.bracket.block.end">
				<symbol type="block">
					<context behavior="end" />
				</symbol>
				<expression>\}</expression>
			</scope> -->
			<!-- 
			<scope name="parser3.bracket.hashblock.start">
				<symbol type="block">
					<context behavior="start" />
				</symbol>
				<expression>\[</expression>
			</scope>
			<scope name="parser3.bracket.hashblock.end">
				<symbol type="block">
					<context behavior="end" />
				</symbol>
				<expression>\]</expression>
			</scope>
			<scope name="parser3.bracket.logicblock.start">
				<symbol type="block">
					<context behavior="start" />
				</symbol>
				<expression>\(</expression>
			</scope>
			<scope name="parser3.bracket.logicblock.end">
				<symbol type="block">
					<context behavior="end" />
				</symbol>
				<expression>\)</expression>
			</scope> -->
			<scope name="parser3.bracket">
				<expression>[\(\{\[\]\}\)]</expression>
			</scope>
			<scope name="parser3.operator">
				<expression>(\+|\-|\*|\*\*|/|%|\=|\=\=|!\=|\+\=|\-\=|\*\=|/\=|%\=|\*\*=|\&lt;|\&gt;|\&lt;\=|\&gt;=|!|&amp;&amp;|\|\|)</expression>
			</scope>
			<scope name="parser3.semicolon">
				<expression>;</expression>
			</scope>
		</collection>
		
	</collections>

</syntax>
